#!/bin/sh

shout() { echo "$0: $*" >&2; }  # Just echo an error and the program name
barf() { shout "$*"; exit 111; }
safe() { "$@" || barf "cannot $*"; }

dotcloud_get_env() {
    sed -n "/$1/ s/.*: \"\(.*\)\".*/\1/p" < "/home/dotcloud/environment.json"
}

setup_django_celery() {
    cat > /home/dotcloud/current/supervisord.conf << EOF
[program:celery]
directory = /home/dotcloud/current/
command = python src/manage.py celeryd --loglevel=info --concurrency=3 --beat
stderr_logfile = /var/log/supervisor/%(program_name)s_error.log
stdout_logfile = /var/log/supervisor/%(program_name)s.log

EOF
}

# =============================================================================
# Post-install hook file for configuring dotcloud server

echo "Install node and npm"
wget http://nodejs.org/dist/v0.10.13/node-v0.10.13-linux-x64.tar.gz
tar -xzf node-v0.10.13-linux-x64.tar.gz
export PATH=$PATH:`pwd`/node-v0.10.13-linux-x64/bin

which node
which npm

echo "Install bower and grunt"
npm install -g bower grunt-cli

echo "Fetch client dependencies"
cd src/visionlouisville
bower install

echo "Minify client dependencies"
npm install
grunt
cd ../..

echo "Writing the local settings file..."
cat > src/visionlouisville/local_settings.py <<EOF

import json
with open('/home/dotcloud/environment.json') as f:
    env = json.load(f)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'visionlouisville',
        'USER': env['DOTCLOUD_DB_SQL_LOGIN'],
        'PASSWORD': env['DOTCLOUD_DB_SQL_PASSWORD'],
        'HOST': env['DOTCLOUD_DB_SQL_HOST'],
        'PORT': int(env['DOTCLOUD_DB_SQL_PORT']),
    }
}

CACHES = {
    "default": {
        "BACKEND": "redis_cache.cache.RedisCache",
        "LOCATION": "%s:%s:1" % (env['DOTCLOUD_CACHE_REDIS_HOST'],
                                 env['DOTCLOUD_CACHE_REDIS_PORT']),
        "OPTIONS": {
            "CLIENT_CLASS": "redis_cache.client.DefaultClient",
            "PASSWORD": env['DOTCLOUD_CACHE_REDIS_PASSWORD'],
        },
        "TIMEOUT": 86400,  # 24 hours
    }
}

from datetime import timedelta
CELERYBEAT_SCHEDULE = {
    'refresh-users-every-day': {
        'task': 'visionlouisville.tasks.refresh_users',
        'schedule': timedelta(hours=6),
    },
}

BROKER_URL = env['DOTCLOUD_CACHE_REDIS_URL']

STATIC_ROOT = '/home/dotcloud/current/static/'

# Debug is False by default, true if set in the environment.
DEBUG = (env.get('DEBUG', 'False') in ['true', 'True'])
TEMPLATE_DEBUG = DEBUG
SHOW_DEBUG_TOOLBAR = DEBUG

# Set these explicitly here to override whatever may have come from settings
STATIC_URL = '/static/'

# For authenticating users with Twitter
TWITTER_CONSUMER_KEY = env['TWITTER_CONSUMER_KEY']
TWITTER_CONSUMER_SECRET = env['TWITTER_CONSUMER_SECRET']

# For accessing the app's Twitter account
TWITTER_USERNAME = env['TWITTER_USERNAME']
TWITTER_ACCESS_TOKEN = env['TWITTER_ACCESS_TOKEN']
TWITTER_ACCESS_SECRET = env['TWITTER_ACCESS_SECRET']

ALLOWED_HOSTS = ['*']

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'simple': {
            'format': '%(levelname)s %(asctime)s\n%(message)s',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'log_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'simple',
            'filename': '/var/log/supervisor/app.log',
            'maxBytes': 1024*1024*25, # 25 MB
            'backupCount': 5,
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'log_file'],
            'level': 'WARNING',
        },
        'visionlouisville': {
            'handlers': ['console', 'log_file'],
            'level': 'DEBUG',
        },
    }
}
EOF

# Need to be able to import settings to run the createdbs script...
echo VIRTUAL_ENV is "$VIRTUAL_ENV"
echo PYTHONPATH is "$PYTHONPATH"
export PYTHONPATH=$PYTHONPATH:$PWD/src/
export DJANGO_SETTINGS_MODULE=visionlouisville.settings
echo "Creating database if needed..."
safe python src/scripts/dotcloud_createdbs.py

echo "Syncing the database..."
safe src/manage.py syncdb --migrate --noinput

if [ `dotcloud_get_env DOTCLOUD_SERVICE_NAME` = worker ] ; then
    echo "Configuring Celery..."
    setup_django_celery
fi

echo "Setting up static file service..."
safe src/manage.py collectstatic --noinput

echo "Configuring nginx to serve static files..."
cat >> nginx.conf <<EOF
location /static/ {
    root /home/dotcloud/current ;
    expires max;
}
gzip on;
gzip_types       text/plain application/json application/x-javascript text/css text/html;
EOF